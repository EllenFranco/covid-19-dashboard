{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","covid-19-dashboard/tests/acceptance/location-search-test.js","covid-19-dashboard/tests/acceptance/mobile-test.js","covid-19-dashboard/tests/acceptance/visit-location-test.js","covid-19-dashboard/tests/helpers/dashboard-asserts.js","covid-19-dashboard/tests/helpers/ember-power-select.js","covid-19-dashboard/tests/helpers/setup-router.js","covid-19-dashboard/tests/integration/components/location-table-test.js","covid-19-dashboard/tests/integration/components/map-test.js","covid-19-dashboard/tests/integration/components/search-bar-test.js","covid-19-dashboard/tests/integration/helpers/eq-test.js","covid-19-dashboard/tests/integration/helpers/format-mins-test.js","covid-19-dashboard/tests/integration/helpers/format-number-test.js","covid-19-dashboard/tests/integration/helpers/get-radius-test.js","covid-19-dashboard/tests/integration/helpers/neq-test.js","covid-19-dashboard/tests/test-helper.js","covid-19-dashboard/tests/unit/controllers/dashboard/location-test.js","covid-19-dashboard/tests/unit/routes/dashboard/index-test.js","covid-19-dashboard/tests/unit/routes/dashboard/location-test.js","covid-19-dashboard/tests/unit/routes/four-oh-four-test.js","covid-19-dashboard/tests/unit/services/elide-test.js","covid-19-dashboard/tests/unit/services/location-test.js","covid-19-dashboard/tests/unit/services/metadata-test.js","covid-19-dashboard/tests/unit/utils/inflector-test.js","covid-19-dashboard/tests/unit/utils/location-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"covid-19-dashboard/tests/acceptance/location-search-test\", [\"qunit\", \"@ember/test-helpers\", \"ember-qunit\", \"ember-cli-mirage/test-support/setup-mirage\", \"ember-power-select/test-support\", \"ember-cli-mirage\", \"covid-19-dashboard/tests/helpers/dashboard-asserts\"], function (_qunit, _testHelpers, _emberQunit, _setupMirage, _testSupport, _emberCliMirage, _dashboardAsserts) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Acceptance | location search', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n    (0, _qunit.test)('search for locations', /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var locations;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.visit)('/');\n\n              case 2:\n                _context.next = 4;\n                return (0, _testHelpers.settled)();\n\n              case 4:\n                _context.next = 6;\n                return (0, _testSupport.selectSearch)('.search-bar', 'z');\n\n              case 6:\n                assert.dom('.ember-power-select-option--no-matches-message').hasText('No matches found', 'Search needs at least two characters');\n                _context.next = 9;\n                return (0, _testSupport.selectSearch)('.search-bar', 'zo');\n\n              case 9:\n                assert.dom('.ember-power-select-option').hasText('Arizona', 'Search can find a location with two characters');\n                _context.next = 12;\n                return (0, _testSupport.selectSearch)('.search-bar', 'Col');\n\n              case 12:\n                locations = (0, _testHelpers.findAll)('.ember-power-select-option').map(function (e) {\n                  return e.textContent.trim();\n                });\n                assert.deepEqual(locations, ['Colombia', 'Colorado', 'District of Columbia', 'Colbert County, Alabama'], 'Search can find counties, states, and countries');\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('search api failure', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _testHelpers.visit)('/');\n\n              case 2:\n                this.server.get('/states', function () {\n                  return new _emberCliMirage.Response(401);\n                });\n                _context2.next = 5;\n                return (0, _testSupport.selectSearch)('.search-bar', 'Alab');\n\n              case 5:\n                assert.dom('.ember-power-select-option--no-matches-message').hasText('No matches found', 'A search error message is displayed if the api returns an error');\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('search and navigate to a location', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return (0, _testHelpers.visit)('/Illinois');\n\n              case 2:\n                _context3.next = 4;\n                return (0, _testHelpers.settled)();\n\n              case 4:\n                assert.equal((0, _testHelpers.currentURL)(), '/Illinois', 'Start off at the default route');\n                (0, _dashboardAsserts.assertTitle)(assert, 'Illinois');\n                _context3.next = 8;\n                return (0, _testSupport.selectSearch)('.search-bar', 'Alab');\n\n              case 8:\n                _context3.next = 10;\n                return (0, _testSupport.selectChoose)('.search-bar', 'Alabama');\n\n              case 10:\n                _context3.next = 12;\n                return (0, _testHelpers.settled)();\n\n              case 12:\n                assert.equal((0, _testHelpers.currentURL)(), '/Alabama', 'Selecting `Alabama` from the results transitions to the correct location');\n                (0, _dashboardAsserts.assertTitle)(assert, 'Alabama');\n                (0, _dashboardAsserts.assertGlobalDetails)(assert);\n                (0, _dashboardAsserts.assertBreakdownTable)(assert, {\n                  title: 'Confirmed Cases by County',\n                  rows: [{\n                    title: 'Jefferson County, Alabama',\n                    value: '345'\n                  }, {\n                    title: 'Madison County, Alabama',\n                    value: '119'\n                  }]\n                });\n                (0, _dashboardAsserts.assertBreadCrumb)(assert, [{\n                  title: 'Global',\n                  href: '/'\n                }, {\n                  title: 'United States',\n                  href: '/United_States'\n                }, {\n                  title: 'Alabama',\n                  href: '/Alabama'\n                }]);\n                (0, _dashboardAsserts.assertMap)(assert, {\n                  markerCount: 284,\n                  showPin: true\n                });\n                (0, _dashboardAsserts.assertLocationDetails)(assert, {\n                  title: 'Alabama Details',\n                  population: '4,486,508',\n                  wikiId: 'Alabama'\n                });\n                (0, _dashboardAsserts.assertLocationCaseDetails)(assert, {\n                  casesTotal: '1,315',\n                  casesChange: '-- | --',\n                  activeTotal: '0',\n                  activeChange: '--',\n                  fatalTotal: '32',\n                  fatalChange: '0',\n                  recoveredTotal: '0',\n                  recoveredChange: '0'\n                });\n\n              case 20:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"covid-19-dashboard/tests/acceptance/mobile-test\", [\"qunit\", \"@ember/test-helpers\", \"ember-qunit\", \"ember-cli-mirage/test-support/setup-mirage\", \"covid-19-dashboard/tests/helpers/dashboard-asserts\"], function (_qunit, _testHelpers, _emberQunit, _setupMirage, _dashboardAsserts) {\n  \"use strict\";\n\n  function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\n  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\n  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n  function _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n  function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n  (0, _qunit.module)('Acceptance | mobile', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n    hooks.beforeEach(function () {\n      var _temp;\n\n      this.owner.register('service:screen', (_temp = /*#__PURE__*/function (_EmberService) {\n        _inherits(_temp, _EmberService);\n\n        var _super = _createSuper(_temp);\n\n        function _temp() {\n          var _this;\n\n          _classCallCheck(this, _temp);\n\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          _this = _super.call.apply(_super, [this].concat(args));\n\n          _defineProperty(_assertThisInitialized(_this), \"isMobile\", true);\n\n          return _this;\n        }\n\n        return _temp;\n      }(Ember.Service), _temp));\n    });\n    (0, _qunit.test)('visiting /Earth', /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.visit)('/Earth');\n\n              case 2:\n                assert.equal((0, _testHelpers.currentURL)(), '/Earth', '/Earth loads the Earth location');\n                _context.next = 5;\n                return (0, _testHelpers.settled)();\n\n              case 5:\n                assert.dom('.dashboard__global-case-details').doesNotExist('The mobile view does not display global case details');\n                (0, _dashboardAsserts.assertBreadCrumb)(assert, [{\n                  title: 'Global',\n                  href: '/'\n                }]);\n                (0, _dashboardAsserts.assertMap)(assert, {\n                  markerCount: 221,\n                  showPin: false\n                });\n                (0, _dashboardAsserts.assertLocationDetails)(assert, {\n                  title: 'Earth Details',\n                  population: '--',\n                  wikiId: 'Earth'\n                });\n                _context.next = 11;\n                return (0, _testHelpers.settled)();\n\n              case 11:\n                (0, _dashboardAsserts.assertGlobalDetails)(assert, '.dashboard__location-case-details');\n                assert.dom('.location-table').doesNotExist('Location table is not displayed in details view');\n                assert.dom('.mobile-tabs__tab.is-active').hasText('Details', 'Details view is active');\n                _context.next = 16;\n                return (0, _testHelpers.click)('.mobile-tabs__tab:not(.is-active)');\n\n              case 16:\n                _context.next = 18;\n                return (0, _testHelpers.settled)();\n\n              case 18:\n                assert.dom('.mobile-tabs__tab.is-active').hasText('Confirmed Cases by Country', 'Case breakdown view is active after clicking the tab');\n                (0, _dashboardAsserts.assertBreakdownTable)(assert, {\n                  title: 'Confirmed Cases by Country',\n                  rows: [{\n                    title: 'United States',\n                    value: '261,438'\n                  }, {\n                    title: 'Italy',\n                    value: '119,827'\n                  }]\n                });\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('visiting a country - /United_States', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _testHelpers.visit)('/United_States');\n\n              case 2:\n                assert.equal((0, _testHelpers.currentURL)(), '/United_States', '/United_States loads the United States location');\n                _context2.next = 5;\n                return (0, _testHelpers.settled)();\n\n              case 5:\n                assert.dom('.dashboard__global-case-details').doesNotExist('The mobile view does not display global case details');\n                (0, _dashboardAsserts.assertBreadCrumb)(assert, [{\n                  title: 'Global',\n                  href: '/'\n                }, {\n                  title: 'United States',\n                  href: '/United_States'\n                }]);\n                (0, _dashboardAsserts.assertMap)(assert, {\n                  markerCount: 221,\n                  showPin: true\n                });\n                (0, _dashboardAsserts.assertLocationDetails)(assert, {\n                  title: 'United States Details',\n                  population: '328,239,523',\n                  wikiId: 'United_States'\n                });\n                _context2.next = 11;\n                return (0, _testHelpers.settled)();\n\n              case 11:\n                (0, _dashboardAsserts.assertLocationCaseDetails)(assert, {\n                  casesTotal: '261,438',\n                  casesChange: '-- | --',\n                  activeTotal: '0',\n                  activeChange: '--',\n                  fatalTotal: '6,699',\n                  fatalChange: '0',\n                  recoveredTotal: '0',\n                  recoveredChange: '0'\n                });\n                assert.dom('.location-table').doesNotExist('Location table is not displayed in details view');\n                assert.dom('.mobile-tabs__tab.is-active').hasText('Details', 'Details view is active');\n                _context2.next = 16;\n                return (0, _testHelpers.click)('.mobile-tabs__tab:not(.is-active)');\n\n              case 16:\n                _context2.next = 18;\n                return (0, _testHelpers.settled)();\n\n              case 18:\n                assert.dom('.mobile-tabs__tab.is-active').hasText('Confirmed Cases by State', 'Case breakdown view is active after clicking the tab');\n                (0, _dashboardAsserts.assertBreakdownTable)(assert, {\n                  title: 'Confirmed Cases by State',\n                  rows: [{\n                    title: 'New York (state)',\n                    value: '102,863'\n                  }, {\n                    title: 'New Jersey',\n                    value: '25,590'\n                  }]\n                });\n\n              case 20:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('visiting a state - /Alabama', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return (0, _testHelpers.visit)('/Alabama');\n\n              case 2:\n                assert.equal((0, _testHelpers.currentURL)(), '/Alabama', '/Alabama loads the Alabama location');\n                _context3.next = 5;\n                return (0, _testHelpers.settled)();\n\n              case 5:\n                assert.dom('.dashboard__global-case-details').doesNotExist('The mobile view does not display global case details');\n                (0, _dashboardAsserts.assertBreadCrumb)(assert, [{\n                  title: 'Global',\n                  href: '/'\n                }, {\n                  title: 'United States',\n                  href: '/United_States'\n                }, {\n                  title: 'Alabama',\n                  href: '/Alabama'\n                }]);\n                (0, _dashboardAsserts.assertMap)(assert, {\n                  markerCount: 284,\n                  showPin: true\n                });\n                (0, _dashboardAsserts.assertLocationDetails)(assert, {\n                  title: 'Alabama Details',\n                  population: '4,486,508',\n                  wikiId: 'Alabama'\n                });\n                (0, _dashboardAsserts.assertLocationCaseDetails)(assert, {\n                  casesTotal: '1,315',\n                  casesChange: '-- | --',\n                  activeTotal: '0',\n                  activeChange: '--',\n                  fatalTotal: '32',\n                  fatalChange: '0',\n                  recoveredTotal: '0',\n                  recoveredChange: '0'\n                });\n                assert.dom('.location-table').doesNotExist('Location table is not displayed in details view');\n                assert.dom('.mobile-tabs__tab.is-active').hasText('Details', 'Details view is active');\n                _context3.next = 14;\n                return (0, _testHelpers.click)('.mobile-tabs__tab:not(.is-active)');\n\n              case 14:\n                _context3.next = 16;\n                return (0, _testHelpers.settled)();\n\n              case 16:\n                assert.dom('.mobile-tabs__tab.is-active').hasText('Confirmed Cases by County', 'Case breakdown view is active after clicking the tab');\n                (0, _dashboardAsserts.assertBreakdownTable)(assert, {\n                  title: 'Confirmed Cases by County',\n                  rows: [{\n                    title: 'Jefferson County, Alabama',\n                    value: '345'\n                  }, {\n                    title: 'Madison County, Alabama',\n                    value: '119'\n                  }]\n                });\n\n              case 18:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('visiting a county - /Jefferson_County,_Alabama', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return (0, _testHelpers.visit)('/Jefferson_County,_Alabama');\n\n              case 2:\n                assert.equal((0, _testHelpers.currentURL)(), '/Jefferson_County,_Alabama', '/Jefferson_County,_Alabama loads the Jefferson County, Alabama location');\n                _context4.next = 5;\n                return (0, _testHelpers.settled)();\n\n              case 5:\n                assert.dom('.dashboard__global-case-details').doesNotExist('The mobile view does not display global case details');\n                (0, _dashboardAsserts.assertBreadCrumb)(assert, [{\n                  title: 'Global',\n                  href: '/'\n                }, {\n                  title: 'United States',\n                  href: '/United_States'\n                }, {\n                  title: 'Alabama',\n                  href: '/Alabama'\n                }, {\n                  title: 'Jefferson County, Alabama',\n                  href: '/Jefferson_County,_Alabama'\n                }]);\n                (0, _dashboardAsserts.assertMap)(assert, {\n                  markerCount: 284,\n                  showPin: true\n                });\n                (0, _dashboardAsserts.assertLocationDetails)(assert, {\n                  title: 'Jefferson County, Alabama Details',\n                  population: '662,047',\n                  wikiId: 'Jefferson_County,_Alabama'\n                });\n                (0, _dashboardAsserts.assertLocationCaseDetails)(assert, {\n                  casesTotal: '345',\n                  casesChange: '-- | --',\n                  activeTotal: '0',\n                  activeChange: '--',\n                  fatalTotal: '0',\n                  fatalChange: '0',\n                  recoveredTotal: '0',\n                  recoveredChange: '0'\n                });\n                assert.dom('.location-table').doesNotExist('Location table is not displayed in details view');\n                assert.dom('.mobile-tabs__tab.is-active').hasText('Details', 'Details view is active');\n                _context4.next = 14;\n                return (0, _testHelpers.click)('.mobile-tabs__tab:not(.is-active)');\n\n              case 14:\n                _context4.next = 16;\n                return (0, _testHelpers.settled)();\n\n              case 16:\n                assert.dom('.mobile-tabs__tab.is-active').hasText('Confirmed Cases by County', 'Case breakdown view is active after clicking the tab');\n                (0, _dashboardAsserts.assertBreakdownTable)(assert, {\n                  title: 'Confirmed Cases by County',\n                  rows: [{\n                    title: 'Jefferson County, Alabama',\n                    value: '345'\n                  }, {\n                    title: 'Madison County, Alabama',\n                    value: '119'\n                  }]\n                });\n\n              case 18:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('visiting a location resets to detail view', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return (0, _testHelpers.visit)('/United_States');\n\n              case 2:\n                assert.equal((0, _testHelpers.currentURL)(), '/United_States', '/United_States loads the United States location');\n                _context5.next = 5;\n                return (0, _testHelpers.settled)();\n\n              case 5:\n                assert.dom('.location-table').doesNotExist('Location table is not displayed in details view');\n                assert.dom('.mobile-tabs__tab.is-active').hasText('Details', 'Details view is active');\n                _context5.next = 9;\n                return (0, _testHelpers.click)('.mobile-tabs__tab:not(.is-active)');\n\n              case 9:\n                _context5.next = 11;\n                return (0, _testHelpers.settled)();\n\n              case 11:\n                assert.dom('.mobile-tabs__tab.is-active').hasText('Confirmed Cases by State', 'Case breakdown view is active after clicking the tab');\n                _context5.next = 14;\n                return (0, _testHelpers.click)(\".location-table__list li:nth-of-type(1) div\");\n\n              case 14:\n                assert.equal((0, _testHelpers.currentURL)(), '/New_York_(state)', 'Clicking `New York (state)` loads the correct location');\n                _context5.next = 17;\n                return (0, _testHelpers.settled)();\n\n              case 17:\n                assert.dom('.mobile-tabs__tab.is-active').hasText('Details', 'Details view is active when visiting a new location');\n                assert.dom('.dashboard__map-details-header__title').hasText('New York (state) Details', 'Detail view is displayed');\n                assert.dom('.location-table').doesNotExist('Location table is not displayed in details view');\n\n              case 20:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x5) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"covid-19-dashboard/tests/acceptance/visit-location-test\", [\"qunit\", \"@ember/test-helpers\", \"ember-qunit\", \"ember-cli-mirage/test-support/setup-mirage\", \"covid-19-dashboard/tests/helpers/dashboard-asserts\"], function (_qunit, _testHelpers, _emberQunit, _setupMirage, _dashboardAsserts) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Acceptance | visit location', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n    (0, _qunit.test)('visiting /', /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.visit)('/');\n\n              case 2:\n                assert.equal((0, _testHelpers.currentURL)(), '/Earth', 'The index route redirects to Earth location');\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('visiting /Not-A-Location redirect to /Earth', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _testHelpers.visit)('/Not-A-Location');\n\n              case 2:\n                assert.equal((0, _testHelpers.currentURL)(), '/Earth', 'An invalid location redirects to Earth location');\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('visiting /Earth', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return (0, _testHelpers.visit)('/Earth');\n\n              case 2:\n                _context3.next = 4;\n                return (0, _testHelpers.settled)();\n\n              case 4:\n                assert.equal((0, _testHelpers.currentURL)(), '/Earth', '/Earth loads the Earth location');\n                (0, _dashboardAsserts.assertTitle)(assert, 'Earth');\n                (0, _dashboardAsserts.assertGlobalDetails)(assert);\n                (0, _dashboardAsserts.assertBreakdownTable)(assert, {\n                  title: 'Confirmed Cases by Country',\n                  rows: [{\n                    title: 'United States',\n                    value: '261,438'\n                  }, {\n                    title: 'Italy',\n                    value: '119,827'\n                  }]\n                });\n                (0, _dashboardAsserts.assertBreadCrumb)(assert, [{\n                  title: 'Global',\n                  href: '/'\n                }]);\n                (0, _dashboardAsserts.assertMap)(assert, {\n                  markerCount: 221,\n                  showPin: false\n                });\n                (0, _dashboardAsserts.assertLocationDetails)(assert, {\n                  title: 'Earth Details',\n                  population: '--',\n                  wikiId: 'Earth'\n                });\n                assert.dom('.dashboard__location-case-details').doesNotExist('Earth location does not show location specific case details');\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('visiting a country - /United_States', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return (0, _testHelpers.visit)('/United_States');\n\n              case 2:\n                assert.equal((0, _testHelpers.currentURL)(), '/United_States', '/United_States loads the United States location');\n                _context4.next = 5;\n                return (0, _testHelpers.settled)();\n\n              case 5:\n                (0, _dashboardAsserts.assertTitle)(assert, 'United States');\n                (0, _dashboardAsserts.assertGlobalDetails)(assert);\n                (0, _dashboardAsserts.assertBreakdownTable)(assert, {\n                  title: 'Confirmed Cases by State',\n                  rows: [{\n                    title: 'New York (state)',\n                    value: '102,863'\n                  }, {\n                    title: 'New Jersey',\n                    value: '25,590'\n                  }]\n                });\n                (0, _dashboardAsserts.assertBreadCrumb)(assert, [{\n                  title: 'Global',\n                  href: '/'\n                }, {\n                  title: 'United States',\n                  href: '/United_States'\n                }]);\n                (0, _dashboardAsserts.assertMap)(assert, {\n                  markerCount: 221,\n                  showPin: true\n                });\n                (0, _dashboardAsserts.assertLocationDetails)(assert, {\n                  title: 'United States Details',\n                  population: '328,239,523',\n                  wikiId: 'United_States'\n                });\n                (0, _dashboardAsserts.assertLocationCaseDetails)(assert, {\n                  casesTotal: '261,438',\n                  casesChange: '-- | --',\n                  activeTotal: '0',\n                  activeChange: '--',\n                  fatalTotal: '6,699',\n                  fatalChange: '0',\n                  recoveredTotal: '0',\n                  recoveredChange: '0'\n                });\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('visiting a state - /Alabama', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return (0, _testHelpers.visit)('/Alabama');\n\n              case 2:\n                assert.equal((0, _testHelpers.currentURL)(), '/Alabama', '/Alabama loads the Alabama location');\n                _context5.next = 5;\n                return (0, _testHelpers.settled)();\n\n              case 5:\n                (0, _dashboardAsserts.assertTitle)(assert, 'Alabama');\n                (0, _dashboardAsserts.assertGlobalDetails)(assert);\n                (0, _dashboardAsserts.assertBreakdownTable)(assert, {\n                  title: 'Confirmed Cases by County',\n                  rows: [{\n                    title: 'Jefferson County, Alabama',\n                    value: '345'\n                  }, {\n                    title: 'Madison County, Alabama',\n                    value: '119'\n                  }]\n                });\n                (0, _dashboardAsserts.assertBreadCrumb)(assert, [{\n                  title: 'Global',\n                  href: '/'\n                }, {\n                  title: 'United States',\n                  href: '/United_States'\n                }, {\n                  title: 'Alabama',\n                  href: '/Alabama'\n                }]);\n                (0, _dashboardAsserts.assertMap)(assert, {\n                  markerCount: 284,\n                  showPin: true\n                });\n                (0, _dashboardAsserts.assertLocationDetails)(assert, {\n                  title: 'Alabama Details',\n                  population: '4,486,508',\n                  wikiId: 'Alabama'\n                });\n                (0, _dashboardAsserts.assertLocationCaseDetails)(assert, {\n                  casesTotal: '1,315',\n                  casesChange: '-- | --',\n                  activeTotal: '0',\n                  activeChange: '--',\n                  fatalTotal: '32',\n                  fatalChange: '0',\n                  recoveredTotal: '0',\n                  recoveredChange: '0'\n                });\n\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x5) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('visiting a county - /Jefferson_County,_Alabama', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return (0, _testHelpers.visit)('/Jefferson_County,_Alabama');\n\n              case 2:\n                assert.equal((0, _testHelpers.currentURL)(), '/Jefferson_County,_Alabama', '/Jefferson_County,_Alabama loads the Jefferson County, Alabama location');\n                _context6.next = 5;\n                return (0, _testHelpers.settled)();\n\n              case 5:\n                (0, _dashboardAsserts.assertTitle)(assert, 'Jefferson County, Alabama');\n                (0, _dashboardAsserts.assertGlobalDetails)(assert);\n                (0, _dashboardAsserts.assertBreakdownTable)(assert, {\n                  title: 'Confirmed Cases by County',\n                  rows: [{\n                    title: 'Jefferson County, Alabama',\n                    value: '345'\n                  }, {\n                    title: 'Madison County, Alabama',\n                    value: '119'\n                  }]\n                });\n                (0, _dashboardAsserts.assertBreadCrumb)(assert, [{\n                  title: 'Global',\n                  href: '/'\n                }, {\n                  title: 'United States',\n                  href: '/United_States'\n                }, {\n                  title: 'Alabama',\n                  href: '/Alabama'\n                }, {\n                  title: 'Jefferson County, Alabama',\n                  href: '/Jefferson_County,_Alabama'\n                }]);\n                (0, _dashboardAsserts.assertMap)(assert, {\n                  markerCount: 284,\n                  showPin: true\n                });\n                (0, _dashboardAsserts.assertLocationDetails)(assert, {\n                  title: 'Jefferson County, Alabama Details',\n                  population: '662,047',\n                  wikiId: 'Jefferson_County,_Alabama'\n                });\n                (0, _dashboardAsserts.assertLocationCaseDetails)(assert, {\n                  casesTotal: '345',\n                  casesChange: '-- | --',\n                  activeTotal: '0',\n                  activeChange: '--',\n                  fatalTotal: '0',\n                  fatalChange: '0',\n                  recoveredTotal: '0',\n                  recoveredChange: '0'\n                });\n\n              case 12:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      return function (_x6) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"covid-19-dashboard/tests/helpers/dashboard-asserts\", [\"exports\", \"@ember/test-helpers\"], function (_exports, _testHelpers) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.assertTitle = _exports.assertLocationCaseDetails = _exports.assertLocationDetails = _exports.assertMap = _exports.assertBreadCrumb = _exports.assertBreakdownTable = _exports.assertGlobalDetails = void 0;\n\n  var assertGlobalDetails = function assertGlobalDetails(assert) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '.dashboard__global-case-details';\n    var casesTotal = '1,076,017',\n        casesChange = '+1,000 | +0.1%',\n        fatalTotal = '58,004',\n        fatalChange = '0';\n    assert.dom(\"\".concat(parent, \" .case-details__cases-total\")).hasText(casesTotal, 'Case details are correct for total cases');\n    assert.dom(\"\".concat(parent, \" .case-details__cases-change\")).hasText(casesChange, 'Case details are correct for daily total cases');\n    assert.dom(\"\".concat(parent, \" .case-details__table-total\")).hasText(fatalTotal, 'Case details are correct for total fatal cases');\n    assert.dom(\"\".concat(parent, \" .case-details__table-change\")).hasText(fatalChange, 'Case details are correct for daily fatal cases');\n  };\n\n  _exports.assertGlobalDetails = assertGlobalDetails;\n\n  var assertBreakdownTable = function assertBreakdownTable(assert, values) {\n    var title = values.title,\n        rows = values.rows;\n    assert.dom('.location-table__title').hasText(title, 'Location shows correct breakdown table title');\n    rows.forEach(function (_ref, idx) {\n      var title = _ref.title,\n          value = _ref.value;\n      var row = idx + 1;\n      assert.dom(\".location-table__list li:nth-of-type(\".concat(row, \") div\")).hasText(title, \"Breakdown table shows the correct title in row \".concat(row));\n      assert.dom(\".location-table__list li:nth-of-type(\".concat(row, \") span\")).hasText(value, \"Breakdown table shows the correct value in row \".concat(row));\n    });\n  };\n\n  _exports.assertBreakdownTable = assertBreakdownTable;\n\n  var assertBreadCrumb = function assertBreadCrumb(assert, values) {\n    var anchors = (0, _testHelpers.findAll)('.breadcrumb a');\n    assert.equal(anchors.length, values.length, 'Number of breadcrumb items is correct');\n    values.forEach(function (_ref2, idx) {\n      var title = _ref2.title,\n          href = _ref2.href;\n      assert.dom(anchors[idx]).hasText(title, 'Breadcrumb has the correct display text');\n      assert.dom(anchors[idx]).hasAttribute('href', href, 'Breadcrumb has the correct href');\n    });\n    assert.dom(anchors[anchors.length - 1]).hasClass('active', 'Right most breadcrumb is displayed as active');\n  };\n\n  _exports.assertBreadCrumb = assertBreadCrumb;\n\n  var assertMap = function assertMap(assert, values) {\n    var markerCount = values.markerCount,\n        showPin = values.showPin;\n    assert.dom('.location-marker').exists({\n      count: markerCount\n    }, 'A location displays correct number of location markers on the map');\n    assert.dom('.map__marker-icon').exists({\n      count: showPin ? 1 : 0\n    }, 'A location displays the correct number of pins on the map');\n  };\n\n  _exports.assertMap = assertMap;\n\n  var assertLocationDetails = function assertLocationDetails(assert, values) {\n    var title = values.title,\n        population = values.population,\n        wikiId = values.wikiId;\n    assert.dom('.dashboard__map-details-header__title').hasText(title, 'A location shows correct details title');\n    assert.dom('.dashboard__map-details__population-count').hasText(population, 'A location shows correct population value');\n    assert.dom('.dashboard__map-details-header__wiki-link').hasAttribute('href', \"https://en.wikipedia.org/wiki/\".concat(wikiId), 'A location has the correct wiki link');\n  };\n\n  _exports.assertLocationDetails = assertLocationDetails;\n\n  var assertLocationCaseDetails = function assertLocationCaseDetails(assert, values) {\n    var casesTotal = values.casesTotal,\n        casesChange = values.casesChange,\n        activeTotal = values.activeTotal,\n        activeChange = values.activeChange,\n        fatalTotal = values.fatalTotal,\n        fatalChange = values.fatalChange,\n        recoveredTotal = values.recoveredTotal,\n        recoveredChange = values.recoveredChange;\n    var parent = '.dashboard__location-case-details';\n    assert.dom(\"\".concat(parent, \" .case-details__cases-total\")).hasText(casesTotal, 'Case details are correct for total cases');\n    assert.dom(\"\".concat(parent, \" .case-details__cases-change\")).hasText(casesChange, 'Case details are correct for daily total cases');\n    assert.dom(\"\".concat(parent, \" .case-details__table-col--active .case-details__table-total\")).hasText(activeTotal, 'Case details are correct for total active cases');\n    assert.dom(\"\".concat(parent, \" .case-details__table-col--active .case-details__table-change\")).hasText(activeChange, 'Case details are correct for daily active cases');\n    assert.dom(\"\".concat(parent, \" .case-details__table-col--fatal .case-details__table-total\")).hasText(fatalTotal, 'Case details are correct for total fatal cases');\n    assert.dom(\"\".concat(parent, \" .case-details__table-col--fatal .case-details__table-change\")).hasText(fatalChange, 'Case details are correct for daily fatal cases');\n    assert.dom(\"\".concat(parent, \" .case-details__table-col--recovered .case-details__table-total\")).hasText(recoveredTotal, 'Case details are correct for total recovered cases');\n    assert.dom(\"\".concat(parent, \" .case-details__table-col--recovered .case-details__table-change\")).hasText(recoveredChange, 'Case details are correct for daily recovered cases');\n  };\n\n  _exports.assertLocationCaseDetails = assertLocationCaseDetails;\n\n  var assertTitle = function assertTitle(assert, location) {\n    var title = document.querySelector('head title').textContent;\n    assert.equal(title, \"\".concat(location, \" - Covid-19 Tracker - Yahoo Knowledge Graph\"), 'Page title matches the expected title');\n  };\n\n  _exports.assertTitle = assertTitle;\n});","define(\"covid-19-dashboard/tests/helpers/ember-power-select\", [\"exports\", \"ember-power-select/test-support/helpers\"], function (_exports, _helpers) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = deprecatedRegisterHelpers;\n  _exports.selectChoose = _exports.touchTrigger = _exports.nativeTouch = _exports.clickTrigger = _exports.typeInSearch = _exports.triggerKeydown = _exports.nativeMouseUp = _exports.nativeMouseDown = _exports.findContains = void 0;\n\n  function deprecateHelper(fn, name) {\n    return function () {\n      (true && !(false) && Ember.deprecate(\"DEPRECATED `import { \".concat(name, \" } from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import { \").concat(name, \" } from 'ember-power-select/test-support/helpers';`\"), false, {\n        until: '1.11.0',\n        id: \"ember-power-select-test-support-\".concat(name)\n      }));\n      return fn.apply(void 0, arguments);\n    };\n  }\n\n  var findContains = deprecateHelper(_helpers.findContains, 'findContains');\n  _exports.findContains = findContains;\n  var nativeMouseDown = deprecateHelper(_helpers.nativeMouseDown, 'nativeMouseDown');\n  _exports.nativeMouseDown = nativeMouseDown;\n  var nativeMouseUp = deprecateHelper(_helpers.nativeMouseUp, 'nativeMouseUp');\n  _exports.nativeMouseUp = nativeMouseUp;\n  var triggerKeydown = deprecateHelper(_helpers.triggerKeydown, 'triggerKeydown');\n  _exports.triggerKeydown = triggerKeydown;\n  var typeInSearch = deprecateHelper(_helpers.typeInSearch, 'typeInSearch');\n  _exports.typeInSearch = typeInSearch;\n  var clickTrigger = deprecateHelper(_helpers.clickTrigger, 'clickTrigger');\n  _exports.clickTrigger = clickTrigger;\n  var nativeTouch = deprecateHelper(_helpers.nativeTouch, 'nativeTouch');\n  _exports.nativeTouch = nativeTouch;\n  var touchTrigger = deprecateHelper(_helpers.touchTrigger, 'touchTrigger');\n  _exports.touchTrigger = touchTrigger;\n  var selectChoose = deprecateHelper(_helpers.selectChoose, 'selectChoose');\n  _exports.selectChoose = selectChoose;\n\n  function deprecatedRegisterHelpers() {\n    (true && !(false) && Ember.deprecate(\"DEPRECATED `import registerPowerSelectHelpers from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import registerPowerSelectHelpers from 'ember-power-select/test-support/helpers';`\", false, {\n      until: '1.11.0',\n      id: 'ember-power-select-test-support-register-helpers'\n    }));\n    return (0, _helpers.default)();\n  }\n});","define(\"covid-19-dashboard/tests/helpers/setup-router\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = _default;\n\n  function _default(hooks) {\n    hooks.beforeEach(function () {\n      var router = this.owner.lookup('router:main');\n      router.initialURL = '/missing';\n      router.startRouting();\n    });\n  }\n});","define(\"covid-19-dashboard/tests/integration/components/location-table-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-cli-mirage/test-support/setup-mirage\", \"covid-19-dashboard/tests/helpers/setup-router\"], function (_qunit, _emberQunit, _testHelpers, _setupMirage, _setupRouter) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | location-table', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n    (0, _setupRouter.default)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var location;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.owner.lookup('service:location').fetch('Earth');\n\n              case 2:\n                location = _context.sent;\n                this.set('location', location);\n                this.set('date', '2020-04-03T00:00Z');\n                this.set('fieldToShow', 'totalConfirmedCases');\n                _context.next = 8;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <LocationTable @location={{this.location}} @publishedDate={{this.date}} @fieldToShow={{this.fieldToShow}} />\n                */\n                {\n                  id: \"dnEmD+s9\",\n                  block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"location-table\\\",[],[[\\\"@location\\\",\\\"@publishedDate\\\",\\\"@fieldToShow\\\"],[[27,[24,0],[\\\"location\\\"]],[27,[24,0],[\\\"date\\\"]],[27,[24,0],[\\\"fieldToShow\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n                  meta: {}\n                }));\n\n              case 8:\n                _context.next = 10;\n                return (0, _testHelpers.waitFor)('.location-table__list-item');\n\n              case 10:\n                assert.dom('.location-table__list').exists('The list is rendered');\n                assert.dom('.location-table__list-item').exists('The list is populated');\n                assert.dom('.location-table__list-item').hasText('United States 261,438', 'The list item fields are populated');\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"covid-19-dashboard/tests/integration/components/map-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-cli-mirage/test-support/setup-mirage\"], function (_qunit, _emberQunit, _testHelpers, _setupMirage) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | map', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.set('location', {\n                  attributes: {\n                    latitude: 0,\n                    longitude: 0\n                  }\n                });\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <Map @location={{this.location}}/>\n                */\n                {\n                  id: \"St6bZ1jh\",\n                  block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"map\\\",[],[[\\\"@location\\\"],[[27,[24,0],[\\\"location\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n                  meta: {}\n                }));\n\n              case 3:\n                assert.dom('.map').exists('Map component can render');\n                _context.next = 6;\n                return (0, _testHelpers.settled)();\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"covid-19-dashboard/tests/integration/components/search-bar-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"ember-cli-mirage/test-support/setup-mirage\"], function (_qunit, _emberQunit, _testHelpers, _setupMirage) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Component | search-bar', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n    (0, _qunit.test)('search bar rendered', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(4);\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  <SearchBar />\n                */\n                {\n                  id: \"Un3ZuBxw\",\n                  block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"search-bar\\\",[],[[],[]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n                  meta: {}\n                }));\n\n              case 3:\n                assert.dom('.search-bar__trigger').exists('A search input is rendered');\n                _context.next = 6;\n                return (0, _testHelpers.click)('.search-bar__trigger');\n\n              case 6:\n                _context.next = 8;\n                return (0, _testHelpers.fillIn)('.search-bar__trigger-input', 'cha');\n\n              case 8:\n                assert.dom('.search-bar .ember-power-select-option--loading-message').exists('While data loads a loading message is rendered');\n                _context.next = 11;\n                return (0, _testHelpers.waitFor)('.search-bar .ember-power-select-option');\n\n              case 11:\n                assert.dom('.search-bar .ember-power-select-option').exists({\n                  count: 3\n                }, 'Three items are rendered');\n                _context.next = 14;\n                return (0, _testHelpers.fillIn)('.search-bar__trigger-input', 'states');\n\n              case 14:\n                _context.next = 16;\n                return (0, _testHelpers.waitFor)('.search-bar .ember-power-select-option');\n\n              case 16:\n                assert.dom('.search-bar .ember-power-select-option').hasText('United States', 'Search also looks for countries');\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"covid-19-dashboard/tests/integration/helpers/eq-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Helper | eq', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  {{eq 1 2}}\n                */\n                {\n                  id: \"KWXzdlJy\",\n                  block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,0,0,0,[31,2,2,[27,[26,0,\\\"CallHead\\\"],[]],[1,2],null]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"eq\\\"]}\",\n                  meta: {}\n                }));\n\n              case 2:\n                assert.dom().hasText('false', 'eq return false when to numbers are not the same');\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  {{eq \"1\" \"1\"}}\n                */\n                {\n                  id: \"6Ttozw6t\",\n                  block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,0,0,0,[31,2,2,[27,[26,0,\\\"CallHead\\\"],[]],[\\\"1\\\",\\\"1\\\"],null]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"eq\\\"]}\",\n                  meta: {}\n                }));\n\n              case 5:\n                assert.dom().hasText('true', 'eq return true when to numbers are the same');\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"covid-19-dashboard/tests/integration/helpers/format-mins-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Helper | format-mins', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert.expect(3);\n                this.set('inputValue', '34');\n                _context.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  {{format-mins inputValue}}\n                */\n                {\n                  id: \"Of5uwOIV\",\n                  block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,0,0,0,[31,2,11,[27,[26,1,\\\"CallHead\\\"],[]],[[27,[26,0,\\\"Expression\\\"],[]]],null]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"inputValue\\\",\\\"format-mins\\\"]}\",\n                  meta: {}\n                }));\n\n              case 4:\n                assert.dom().hasText('34 mins');\n                this.set('inputValue', '834');\n                assert.dom().hasText('13h 54m');\n                this.set('inputValue', '67834');\n                assert.dom().hasText('47d 2h 34m');\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it can handle empty values', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.set('inputValue', undefined);\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  {{format-mins inputValue}}\n                */\n                {\n                  id: \"Of5uwOIV\",\n                  block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,0,0,0,[31,2,11,[27,[26,1,\\\"CallHead\\\"],[]],[[27,[26,0,\\\"Expression\\\"],[]]],null]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"inputValue\\\",\\\"format-mins\\\"]}\",\n                  meta: {}\n                }));\n\n              case 3:\n                assert.dom().hasText('--', 'format helper renders `--` when given undefined');\n                this.set('inputValue', null);\n                _context2.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  {{format-mins inputValue}}\n                */\n                {\n                  id: \"Of5uwOIV\",\n                  block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,0,0,0,[31,2,11,[27,[26,1,\\\"CallHead\\\"],[]],[[27,[26,0,\\\"Expression\\\"],[]]],null]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"inputValue\\\",\\\"format-mins\\\"]}\",\n                  meta: {}\n                }));\n\n              case 7:\n                assert.dom().hasText('--', 'format helper renders `--` when given null');\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"covid-19-dashboard/tests/integration/helpers/format-number-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Helper | format-number', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it formats a number', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.set('inputValue', '1234');\n                _context.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  {{format-number inputValue}}\n                */\n                {\n                  id: \"cuNHadL3\",\n                  block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,0,0,0,[31,2,13,[27,[26,1,\\\"CallHead\\\"],[]],[[27,[26,0,\\\"Expression\\\"],[]]],null]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"inputValue\\\",\\\"format-number\\\"]}\",\n                  meta: {}\n                }));\n\n              case 3:\n                assert.dom().hasText('1,234');\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('it can handle empty values', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.set('inputValue', undefined);\n                _context2.next = 3;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  {{format-number inputValue}}\n                */\n                {\n                  id: \"cuNHadL3\",\n                  block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,0,0,0,[31,2,13,[27,[26,1,\\\"CallHead\\\"],[]],[[27,[26,0,\\\"Expression\\\"],[]]],null]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"inputValue\\\",\\\"format-number\\\"]}\",\n                  meta: {}\n                }));\n\n              case 3:\n                assert.dom().hasText('--', 'format helper renders `--` when given undefined');\n                this.set('inputValue', null);\n                _context2.next = 7;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  {{format-number inputValue}}\n                */\n                {\n                  id: \"cuNHadL3\",\n                  block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,0,0,0,[31,2,13,[27,[26,1,\\\"CallHead\\\"],[]],[[27,[26,0,\\\"Expression\\\"],[]]],null]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"inputValue\\\",\\\"format-number\\\"]}\",\n                  meta: {}\n                }));\n\n              case 7:\n                assert.dom().hasText('--', 'format helper renders `--` when given null');\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"covid-19-dashboard/tests/integration/helpers/get-radius-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Helper | get-radius', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.set('inputValue', '1234');\n                this.set('zoom', 1);\n                _context.next = 4;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  {{get-radius number=100 zoom=this.zoom}}\n                */\n                {\n                  id: \"1mFaRPhj\",\n                  block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,0,0,0,[31,2,10,[27,[26,0,\\\"CallHead\\\"],[]],null,[[\\\"number\\\",\\\"zoom\\\"],[100,[27,[24,0],[\\\"zoom\\\"]]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"get-radius\\\"]}\",\n                  meta: {}\n                }));\n\n              case 4:\n                assert.dom().hasText('20000', 'get-radius can calculate the radius with a zoom value');\n                this.set('zoom', 7);\n                _context.next = 8;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  {{get-radius number=100 zoom=this.zoom}}\n                */\n                {\n                  id: \"1mFaRPhj\",\n                  block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,0,0,0,[31,2,10,[27,[26,0,\\\"CallHead\\\"],[]],null,[[\\\"number\\\",\\\"zoom\\\"],[100,[27,[24,0],[\\\"zoom\\\"]]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"get-radius\\\"]}\",\n                  meta: {}\n                }));\n\n              case 8:\n                assert.dom().hasText('10000', 'get-radius can calculate the radius with a zoom value');\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"covid-19-dashboard/tests/integration/helpers/neq-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Integration | Helper | neq', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  {{neq 1 2}}\n                */\n                {\n                  id: \"zm6d8K99\",\n                  block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,0,0,0,[31,2,3,[27,[26,0,\\\"CallHead\\\"],[]],[1,2],null]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"neq\\\"]}\",\n                  meta: {}\n                }));\n\n              case 2:\n                assert.dom().hasText('true', 'neq return true when to numbers are not the same');\n                _context.next = 5;\n                return (0, _testHelpers.render)(Ember.HTMLBars.template(\n                /*\n                  {{neq \"1\" \"1\"}}\n                */\n                {\n                  id: \"/huseLVs\",\n                  block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,0,0,0,[31,2,3,[27,[26,0,\\\"CallHead\\\"],[]],[\\\"1\\\",\\\"1\\\"],null]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"neq\\\"]}\",\n                  meta: {}\n                }));\n\n              case 5:\n                assert.dom().hasText('false', 'neq return false when to numbers are the same');\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"covid-19-dashboard/tests/test-helper\", [\"covid-19-dashboard/app\", \"covid-19-dashboard/config/environment\", \"@ember/test-helpers\", \"ember-qunit\", \"ember-raf-scheduler/test-support/register-waiter\"], function (_app, _environment, _testHelpers, _emberQunit, _registerWaiter) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _registerWaiter.default)();\n  (0, _emberQunit.start)();\n});","define(\"covid-19-dashboard/tests/unit/controllers/dashboard/location-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | dashboard/location', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      var controller = this.owner.lookup('controller:dashboard/location');\n      assert.ok(controller);\n    });\n  });\n});","define(\"covid-19-dashboard/tests/unit/routes/dashboard/index-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | dashboard/index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      var route = this.owner.lookup('route:dashboard/index');\n      assert.ok(route);\n    });\n  });\n});","define(\"covid-19-dashboard/tests/unit/routes/dashboard/location-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | dashboard/location', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      var route = this.owner.lookup('route:dashboard/location');\n      assert.ok(route);\n    });\n  });\n});","define(\"covid-19-dashboard/tests/unit/routes/four-oh-four-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | four-oh-four', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      var route = this.owner.lookup('route:four-oh-four');\n      assert.ok(route);\n    });\n  });\n});","define(\"covid-19-dashboard/tests/unit/services/elide-test\", [\"qunit\", \"ember-qunit\", \"ember-cli-mirage/test-support/setup-mirage\"], function (_qunit, _emberQunit, _setupMirage) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Unit | Service | elide', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n    hooks.beforeEach(function () {\n      this.service = this.owner.lookup('service:elide');\n    });\n    (0, _qunit.test)('it exists', function (assert) {\n      assert.ok(this.service);\n    });\n    (0, _qunit.test)('_buildUrl - search', function (assert) {\n      var service = this.service;\n\n      var actualUrl = service._buildUrl('counties', {\n        search: {\n          label: 'Cham'\n        },\n        fields: {\n          counties: ['id', 'label'],\n          states: ['label']\n        },\n        include: ['states']\n      });\n\n      assert.equal(actualUrl.toString(), 'https://covid19.knowledge.yahoo.com/api/json/v1/counties?fields%5Bcounties%5D=id%2Clabel&fields%5Bstates%5D=label&filter=label%3D%3D%27*Cham*%27&include=states&page%5Boffset%5D=0&page%5Blimit%5D=4000', '_buildSearchUrl build a url given a request');\n    });\n    (0, _qunit.test)('_buildFetchUrl - in list', function (assert) {\n      var service = this.service;\n\n      var actualUrl = service._buildUrl('counties', {\n        isIn: {\n          label: ['Champaign County, Illinois'],\n          'state.id': [123]\n        },\n        fields: {\n          counties: ['id', 'label'],\n          states: ['label']\n        },\n        include: ['states']\n      });\n\n      assert.equal(actualUrl.toString(), 'https://covid19.knowledge.yahoo.com/api/json/v1/counties?fields%5Bcounties%5D=id%2Clabel&fields%5Bstates%5D=label&filter=label%3Din%3D%28%27Champaign+County%5C%2C+Illinois%27%29%3Bstate.id%3Din%3D%28%27123%27%29&include=states&page%5Boffset%5D=0&page%5Blimit%5D=4000', '_buildSearchUrl build a url given a request');\n    });\n    (0, _qunit.test)('_buildFetchUrl - null & eq', function (assert) {\n      var service = this.service;\n\n      var actualUrl = service._buildUrl('healthRecords', {\n        eq: {\n          referenceDate: '2020-04-03T00:00Z'\n        },\n        isNull: ['county', 'state', 'country']\n      });\n\n      assert.equal(actualUrl.toString(), 'https://covid19.knowledge.yahoo.com/api/json/v1/healthRecords?filter=referenceDate%3D%3D%272020-04-03T00%3A00Z%27%3Bcounty%3Disnull%3Dtrue%3Bstate%3Disnull%3Dtrue%3Bcountry%3Disnull%3Dtrue&page%5Boffset%5D=0&page%5Blimit%5D=4000', '_buildSearchUrl build a url given a request');\n    });\n    (0, _qunit.test)('fetch - counties', /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var service, actualData;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                service = this.service;\n                _context.next = 3;\n                return service.fetch.perform('counties', {\n                  isIn: {\n                    id: ['40e54368289c4795f51747e131d408bd']\n                  },\n                  include: ['state']\n                });\n\n              case 3:\n                actualData = _context.sent;\n                assert.deepEqual(actualData, {\n                  data: [{\n                    type: 'counties',\n                    id: '40e54368289c4795f51747e131d408bd',\n                    attributes: {\n                      label: 'Champaign County, Illinois',\n                      latitude: 40.13986,\n                      longitude: -88.19619,\n                      population: 201081,\n                      wikiId: 'Champaign_County,_Illinois'\n                    },\n                    relationships: {\n                      state: {\n                        data: {\n                          type: 'states',\n                          id: '66c2b329479ee151b4c6b257c0b7a9b7'\n                        }\n                      }\n                    }\n                  }],\n                  included: [{\n                    type: 'states',\n                    id: '66c2b329479ee151b4c6b257c0b7a9b7',\n                    attributes: {\n                      label: 'Illinois',\n                      latitude: 40.06446,\n                      longitude: -89.19884,\n                      population: 12600620,\n                      wikiId: 'Illinois'\n                    },\n                    relationships: {\n                      country: {\n                        data: {\n                          type: 'countries',\n                          id: '09d4bca31e2fd8b0f57f79f85ed42bd8'\n                        }\n                      },\n                      counties: {\n                        data: [] // Only Alabama has county relationships in the fixture data\n\n                      }\n                    }\n                  }]\n                }, 'fetch can return data for a request');\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('fetch - search states', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var service, actualData;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                service = this.service;\n                _context2.next = 3;\n                return service.fetch.perform('states', {\n                  search: {\n                    label: ['Ill']\n                  }\n                });\n\n              case 3:\n                actualData = _context2.sent;\n                assert.deepEqual(actualData, {\n                  data: [{\n                    type: 'states',\n                    id: '66c2b329479ee151b4c6b257c0b7a9b7',\n                    attributes: {\n                      label: 'Illinois',\n                      latitude: 40.06446,\n                      longitude: -89.19884,\n                      population: 12600620,\n                      wikiId: 'Illinois'\n                    },\n                    relationships: {\n                      country: {\n                        data: {\n                          type: 'countries',\n                          id: '09d4bca31e2fd8b0f57f79f85ed42bd8'\n                        }\n                      },\n                      counties: {\n                        data: []\n                      }\n                    }\n                  }]\n                }, 'fetch can return data for a search request');\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('fetch - no options', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var service, actualData;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                service = this.service;\n                _context3.next = 3;\n                return service.fetch.perform('metadata');\n\n              case 3:\n                actualData = _context3.sent;\n                assert.deepEqual(actualData, {\n                  data: [{\n                    attributes: {\n                      healthRecordsEndDate: '2020-04-03T00:00Z',\n                      healthRecordsStartDate: '2020-04-03T00:00Z',\n                      publishedDate: '2020-04-03T03:00Z'\n                    },\n                    id: 'info',\n                    type: 'metadata'\n                  }]\n                }, 'fetch can return data with no request options');\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('fetch - relationship field filter', /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n        var service, actualData;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                service = this.service;\n                _context4.next = 3;\n                return service.fetch.perform('healthRecords', {\n                  eq: {\n                    'country.wikiId': 'Italy'\n                  }\n                });\n\n              case 3:\n                actualData = _context4.sent;\n                assert.deepEqual(actualData, {\n                  data: [{\n                    attributes: {\n                      label: 'Italy',\n                      dataSource: 'https://news.yahoo.com/coronavirus',\n                      latitude: 42.50382,\n                      longitude: 12.57347,\n                      numActiveCases: 85388,\n                      numDeaths: 0,\n                      numPendingTests: 0,\n                      numRecoveredCases: 0,\n                      numTested: 0,\n                      referenceDate: '2020-04-03T00:00Z',\n                      totalConfirmedCases: 119827,\n                      totalDeaths: 14681,\n                      totalRecoveredCases: 0,\n                      totalTestedCases: 0,\n                      type: 'healthRecords',\n                      wikiId: 'Italy'\n                    },\n                    id: '9025bd9a-6e24-35d7-a90e-e1a47eb409ff',\n                    relationships: {\n                      country: {\n                        data: {\n                          id: '1007e1b7f894dfbf72a0eaa80f3bc57e',\n                          type: 'countries'\n                        }\n                      },\n                      county: {\n                        data: null\n                      },\n                      state: {\n                        data: null\n                      }\n                    },\n                    type: 'health-records'\n                  }]\n                }, 'fetch can filter on relationship fields');\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('fetch - escaped filter values', /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n        var service, actualData;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                service = this.service;\n                _context5.next = 3;\n                return service.fetch.perform('counties', {\n                  eq: {\n                    wikiId: 'Autauga_County,_Alabama'\n                  }\n                });\n\n              case 3:\n                actualData = _context5.sent;\n                assert.deepEqual(actualData, {\n                  data: [{\n                    attributes: {\n                      label: 'Autauga County, Alabama',\n                      latitude: 32.50771,\n                      longitude: -86.66611,\n                      population: 54571,\n                      wikiId: 'Autauga_County,_Alabama'\n                    },\n                    id: '78fb973e0330b5bef80178cb2ee15544',\n                    relationships: {\n                      state: {\n                        data: {\n                          type: 'states',\n                          id: '213fe69502445ed67ae8b99d22838802'\n                        }\n                      }\n                    },\n                    type: 'counties'\n                  }]\n                }, 'fetch can return data with escaped filter values');\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x5) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('trace id', /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n        var service, stateTraceID, countyTraceID;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                assert.expect(3);\n                service = this.service;\n                this.server.get('https://covid19.knowledge.yahoo.com/api/json/v1/counties', function (db, req) {\n                  countyTraceID = req.requestHeaders['x-trace-id'];\n                  assert.ok(countyTraceID, 'A unique id is generated per request');\n                });\n                this.server.get('https://covid19.knowledge.yahoo.com/api/json/v1/states', function (db, req) {\n                  stateTraceID = req.requestHeaders['x-trace-id'];\n                  assert.ok(stateTraceID, 'A unique id is generated per request');\n                });\n                _context6.next = 6;\n                return service.fetch.perform('counties', {\n                  eq: {\n                    wikiId: 'Autauga_County,_Alabama'\n                  }\n                });\n\n              case 6:\n                _context6.next = 8;\n                return service.fetch.perform('states', {\n                  eq: {\n                    wikiId: 'Alabama'\n                  }\n                });\n\n              case 8:\n                assert.notEqual(stateTraceID, countyTraceID, 'The headers have unique ids');\n\n              case 9:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x6) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"covid-19-dashboard/tests/unit/services/location-test\", [\"qunit\", \"ember-qunit\", \"ember-cli-mirage/test-support/setup-mirage\"], function (_qunit, _emberQunit, _setupMirage) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Unit | Service | location', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n    (0, _qunit.test)('it can fetch a location', /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var service, earth, country, state, county, missingLocation;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                service = this.owner.lookup('service:location');\n                _context.next = 3;\n                return service.fetch('Earth');\n\n              case 3:\n                earth = _context.sent;\n                assert.equal(earth.id, '5cdd21c97f86686cc505e02fd32a7523', '`fetch` can return Earth location');\n                assert.equal(earth.type, 'global', '`fetch` can return Earth location');\n                assert.equal(earth.country, undefined, '`fetch` can return Earth location');\n                assert.equal(earth.state, undefined, '`fetch` can return Earth location');\n                assert.equal(earth.county, undefined, '`fetch` can return Earth location');\n                _context.next = 11;\n                return service.fetch('Italy');\n\n              case 11:\n                country = _context.sent;\n                assert.equal(country.id, '1007e1b7f894dfbf72a0eaa80f3bc57e', '`fetch` can return a country location');\n                assert.equal(country.type, 'countries', '`fetch` can return a country location');\n                assert.equal(country.country, undefined, '`fetch` can return a country location');\n                assert.equal(country.state, undefined, '`fetch` can return a country location');\n                assert.equal(country.county, undefined, '`fetch` can return a country location');\n                _context.next = 19;\n                return service.fetch('Florida');\n\n              case 19:\n                state = _context.sent;\n                assert.equal(state.id, 'eeaca0ed2f6a35370c77de30792debb8', '`fetch` can return a state location');\n                assert.equal(state.type, 'states', '`fetch` can return a state location');\n                assert.equal(state.country.id, '09d4bca31e2fd8b0f57f79f85ed42bd8', '`fetch` can return a state location');\n                assert.equal(state.state, undefined, '`fetch` can return a state location');\n                assert.equal(state.county, undefined, '`fetch` can return a state location');\n                _context.next = 27;\n                return service.fetch('Autauga_County,_Alabama');\n\n              case 27:\n                county = _context.sent;\n                assert.equal(county.id, '78fb973e0330b5bef80178cb2ee15544', '`fetch` can return a county location');\n                assert.equal(county.type, 'counties', '`fetch` can return a county location');\n                assert.equal(county.country.id, '09d4bca31e2fd8b0f57f79f85ed42bd8', '`fetch` can return a county location');\n                assert.equal(county.county, undefined, '`fetch` can return a county location');\n                _context.next = 34;\n                return service.fetch('Not_A_Location');\n\n              case 34:\n                missingLocation = _context.sent;\n                assert.equal(missingLocation, undefined, '`fetch` returns undefined when a location is missing');\n\n              case 36:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"covid-19-dashboard/tests/unit/services/metadata-test\", [\"qunit\", \"ember-qunit\", \"ember-cli-mirage/test-support/setup-mirage\"], function (_qunit, _emberQunit, _setupMirage) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Unit | Service | metadata', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n    (0, _qunit.test)('it can fetch metadata', /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var service, metadata;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                service = this.owner.lookup('service:metadata');\n                assert.equal(service.metadata, undefined, '`metadata` property is initially undefined');\n                _context.next = 4;\n                return service.fetch();\n\n              case 4:\n                metadata = _context.sent;\n                assert.deepEqual(metadata, {\n                  healthRecordsStartDate: '2020-04-03T00:00Z',\n                  healthRecordsEndDate: '2020-04-03T00:00Z',\n                  publishedDate: '2020-04-03T03:00Z'\n                }, '`fetch` returns api metadata');\n                assert.equal(metadata, service.metadata, '`metadata` property is populated after fetch');\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('healthRecordsEndDate', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n        var service;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                service = this.owner.lookup('service:metadata');\n                assert.equal(service.healthRecordsEndDate, undefined, '`healthRecordsEndDate` property is initially undefined');\n                _context2.next = 4;\n                return service.fetch();\n\n              case 4:\n                assert.equal(service.healthRecordsEndDate, '2020-04-03T00:00Z', '`healthRecordsEndDate` property is populated after fetch');\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0, _qunit.test)('timeSinceRefresh', /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n        var service;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                service = this.owner.lookup('service:metadata');\n                assert.equal(service.timeSinceRefresh, null, '`timeSinceRefresh` property is initially null');\n                _context3.next = 4;\n                return service.fetch();\n\n              case 4:\n                assert.notOk(isNaN(service.timeSinceRefresh), '`timeSinceRefresh` property is populated after fetch');\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  });\n});","define(\"covid-19-dashboard/tests/unit/utils/inflector-test\", [\"covid-19-dashboard/utils/inflector\", \"qunit\"], function (_inflector, _qunit) {\n  \"use strict\";\n\n  /**\n   * Copyright 2020, Verizon Media.\n   * Licensed under the terms of the Apache License, Version 2.0. See accompanying LICENSE.md file for terms.\n   */\n  (0, _qunit.module)('Unit | Utility | inflector', function () {\n    (0, _qunit.test)('singularize', function (assert) {\n      assert.equal((0, _inflector.singularize)('counties'), 'county', 'singularize can singularize counties');\n      assert.equal((0, _inflector.singularize)('states'), 'state', 'singularize can singularize states');\n      assert.equal((0, _inflector.singularize)('countries'), 'country', 'singularize can singularize countries');\n      assert.equal((0, _inflector.singularize)('foo'), 'foo', 'singularize returns the given word if missing from its map');\n    });\n    (0, _qunit.test)('pluralize', function (assert) {\n      assert.equal((0, _inflector.pluralize)('county'), 'counties', 'pluralize can pluralize county');\n      assert.equal((0, _inflector.pluralize)('state'), 'states', 'pluralize can pluralize state');\n      assert.equal((0, _inflector.pluralize)('country'), 'countries', 'pluralize can pluralize country');\n      assert.equal((0, _inflector.pluralize)('foo'), 'foo', 'pluralize returns the given word if missing from its map');\n    });\n  });\n});","define(\"covid-19-dashboard/tests/unit/utils/location-test\", [\"covid-19-dashboard/utils/location\", \"qunit\", \"ember-qunit\", \"ember-cli-mirage/test-support/setup-mirage\"], function (_location, _qunit, _emberQunit, _setupMirage) {\n  \"use strict\";\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\n  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n  (0, _qunit.module)('Unit | Utility | location', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n    (0, _qunit.test)('breakdownLocationType', /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n        var service, location;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                service = this.owner.lookup('service:location');\n                assert.equal((0, _location.breakdownLocationType)(location), undefined, '`breakdownLocationType` property is initially undefined');\n                _context.next = 4;\n                return service.fetch('Earth');\n\n              case 4:\n                location = _context.sent;\n                assert.equal((0, _location.breakdownLocationType)(location), 'country', '`breakdownLocationType` property is `country` when location is Earth');\n                _context.next = 8;\n                return service.fetch('United_States');\n\n              case 8:\n                location = _context.sent;\n                assert.equal((0, _location.breakdownLocationType)(location), 'state', '`breakdownLocationType` property is `state` when country location has states');\n                _context.next = 12;\n                return service.fetch('Italy');\n\n              case 12:\n                location = _context.sent;\n                assert.equal((0, _location.breakdownLocationType)(location), 'country', '`breakdownLocationType` property is `state` when country location does not have states');\n                _context.next = 16;\n                return service.fetch('Alabama');\n\n              case 16:\n                location = _context.sent;\n                assert.equal((0, _location.breakdownLocationType)(location), 'county', '`breakdownLocationType` property is `county` when state location has counties');\n                _context.next = 20;\n                return service.fetch('Florida');\n\n              case 20:\n                location = _context.sent;\n                assert.equal((0, _location.breakdownLocationType)(location), 'state', '`breakdownLocationType` property is `state` when state location does not have counties');\n                _context.next = 24;\n                return service.fetch('Autauga_County,_Alabama');\n\n              case 24:\n                location = _context.sent;\n                assert.equal((0, _location.breakdownLocationType)(location), 'county', '`breakdownLocationType` property is `county` when location is a county');\n\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  });\n});","define('covid-19-dashboard/config/environment', [], function() {\n  var prefix = 'covid-19-dashboard';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('covid-19-dashboard/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjatGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdlDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtzjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}